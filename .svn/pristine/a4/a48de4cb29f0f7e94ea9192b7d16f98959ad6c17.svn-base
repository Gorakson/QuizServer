
package edu.hm.cs.quiz.server;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import edu.hm.cs.quiz.server.protocol.QuizProtocol;

public class Game implements Runnable {

    private static final String QUESTIONS_CSV_PATH = "/src/edu/hm/cs/quiz/server/data/Questions.csv";
    private static final int NUM_QUESTIONS = 10;
    private QuizProtocol protocol;
    private final List<Question> questions;
    private Collection<ClientConnection> clients;
    private int currentQuestionIndex;

    public Game(Collection<ClientConnection> clients) {
        if (clients == null) {
            throw new NullPointerException();
        }

        protocol = new QuizProtocol(this, clients);
        this.questions = readQuestionCsv();
        this.clients = clients;
        currentQuestionIndex = 0;
    }

    @Override
    public void run() {
        protocol.run();
    }

    public int getNumPlayers() {
        return clients.size();
    }

    public Map<Player, Integer> getScores() {
        final Map<Player, Integer> scores = new HashMap<>();

        questions.stream().forEach(question -> {
            clients.stream().forEach(client -> {
                final Player player = client.getPlayer();
                if (scores.containsKey(player)) {
                    scores.put(player, scores.get(player) + question.getScore(player));
                } else {
                    scores.put(player, question.getScore(player));
                }
            });
        });

        return scores;
    }

    public synchronized boolean hasQuestion() {
        return currentQuestionIndex + 1 < questions.size();
    }

    public synchronized Question nextQuestion() {
        final Question result;

        if (hasQuestion()) {
            result = questions.get(++currentQuestionIndex);
        } else {
            throw new IllegalStateException();
        }

        return result;
    }
    
    public void print() {
        questions.forEach(question -> {
            System.out.println(question.getQuestion() + " - " + question.getCorrectAnswer());
        });
    }

    private List<Question> readQuestionCsv() {
        final List<Question> result = new ArrayList<Question>();
        final List<Question> questions = new ArrayList<Question>();
        final String csvSeperator = ",";
        
        try (BufferedReader reader = new BufferedReader(new FileReader(Paths.get("").toAbsolutePath() + QUESTIONS_CSV_PATH))) {
            String line = reader.readLine();
            while (line != null) {
                final String[] lineSplit = line.split(csvSeperator);

                if (lineSplit.length != 2) {
                    throw new RuntimeException();
                } else {
                    final String question = lineSplit[0];
                    final Answer answer = Answer.valueOf(lineSplit[1]);
                    questions.add(new Question(question, answer));
                }

                line = reader.readLine();
            }
            
            int questionCounter = 0;
            while (questionCounter < NUM_QUESTIONS && questions.size() > 0) {
                Random rng = new Random();
                
                result.add(questions.remove(rng.nextInt(questions.size())));
                questionCounter++;
            }
        } catch (FileNotFoundException e) {
            throw new RuntimeException();
        } catch (IOException e) {
            throw new RuntimeException();
        }


        return result;
    }
}
